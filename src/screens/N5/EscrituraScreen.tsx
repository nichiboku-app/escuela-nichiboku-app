// src/screens/N5/EscrituraScreen.tsx
import * as Speech from 'expo-speech';
import React, { useMemo, useState } from 'react';
import {
  Image,
  Pressable,
  ScrollView,
  StatusBar,
  StyleSheet,
  Text,
  View,
} from 'react-native';
import { useFeedbackSounds } from '../../hooks/useFeedbackSounds';

/* ===== Im√°genes ===== */
const IMG_HIRAGANA = require('../../../assets/images/origenes_hiragana.webp');
const IMG_KATAKANA = require('../../../assets/images/origenes_katakana.webp');
const IMG_KANJI    = require('../../../assets/images/origenes_kanji.webp');

/* =========================
   GLOSARIO (t√©rminos tocables)
========================= */
const GLOSSARY: Record<string, string> = {
  kanji: 'Caracteres logogr√°ficos de origen chino. Aportan el n√∫cleo de significado de muchas palabras.',
  kana: 'Los dos silabarios japoneses: hiragana y katakana.',
  hiragana: 'Silabario cursivo; 46 signos b√°sicos. Curvas suaves. Gram√°tica, part√≠culas y palabras nativas.',
  katakana: 'Silabario angular; 46 signos b√°sicos. Pr√©stamos, onomatopeyas y √©nfasis.',
  many≈çgana: 'Uso antiguo de kanji por su valor fon√©tico para escribir japon√©s. Puente hacia hiragana/katakana.',
  furigana: 'Peque√±os kana junto al kanji que indican su lectura.',
  okurigana: 'Kana que se a√±aden despu√©s del kanji para marcar parte fon√©tica/inflexi√≥n (È£ü„Åπ„Çã, Ë™≠„Çì„Å†).',
  'on‚Äôyomi': 'Lectura ‚Äúchina‚Äù del kanji. Com√∫n en compuestos (ÈõªË©± „Åß„Çì„Çè).',
  'kun‚Äôyomi': 'Lectura nativa japonesa del kanji. Com√∫n con okurigana (Ë™≠„ÇÄ „Çà„ÇÄ).',
  radicales: 'Componentes recurrentes que forman los kanji. Pistas de significado/lectura (Ê∞µ = agua).',
  shod≈ç: 'Caligraf√≠a japonesa; orden y direcci√≥n de trazos son clave (Á≠ÜÈ†Ü).',
  goj≈´on: '‚ÄúCincuenta sonidos‚Äù: cuadr√≠cula a-i-u-e-o con series ka-sa-ta‚Ä¶ base de hiragana/katakana.',
  dakuon: 'Consonantes sonorizadas („Åå/„Åñ/„Å†/„Å∞‚Ä¶). Se marcan con dakuten „Çõ.',
  handakuon: 'Consonantes semisonoras („Å±‚Ä¶). Se marcan con handakuten „Çú.',
  y≈çon: 'Combinaciones con „ÇÉ/„ÇÖ/„Çá (kya, sha‚Ä¶). Se escriben con kana peque√±o.',
};

/* Tooltip simple */
function useTooltip() {
  const [tip, setTip] = useState<{
    visible: boolean; title: string; text: string; x: number; y: number;
  }>({ visible: false, title: '', text: '', x: 0, y: 0 });

  const show = (title: string, text: string, x: number, y: number) =>
    setTip({ visible: true, title, text, x, y });

  const hide = () => setTip(t => ({ ...t, visible: false }));

  return { tip, show, hide };
}

/* =========================
   ROMAJI (kana ‚Üí pronunciaci√≥n)
========================= */
const ROMAJI: Record<string, string> = {
  // a-i-u-e-o
  '„ÅÇ':'a','„ÅÑ':'i','„ÅÜ':'u','„Åà':'e','„Åä':'o',
  '„Ç¢':'a','„Ç§':'i','„Ç¶':'u','„Ç®':'e','„Ç™':'o',
  // k
  '„Åã':'ka','„Åç':'ki','„Åè':'ku','„Åë':'ke','„Åì':'ko',
  '„Ç´':'ka','„Ç≠':'ki','„ÇØ':'ku','„Ç±':'ke','„Ç≥':'ko',
  // s
  '„Åï':'sa','„Åó':'shi','„Åô':'su','„Åõ':'se','„Åù':'so',
  '„Çµ':'sa','„Ç∑':'shi','„Çπ':'su','„Çª':'se','„ÇΩ':'so',
  // t
  '„Åü':'ta','„Å°':'chi','„Å§':'tsu','„Å¶':'te','„Å®':'to',
  '„Çø':'ta','„ÉÅ':'chi','„ÉÑ':'tsu','„ÉÜ':'te','„Éà':'to',
  // n
  '„Å™':'na','„Å´':'ni','„Å¨':'nu','„Å≠':'ne','„ÅÆ':'no',
  '„Éä':'na','„Éã':'ni','„Éå':'nu','„Éç':'ne','„Éé':'no',
  // h
  '„ÅØ':'ha','„Å≤':'hi','„Åµ':'fu','„Å∏':'he','„Åª':'ho',
  '„Éè':'ha','„Éí':'hi','„Éï':'fu','„Éò':'he','„Éõ':'ho',
  // m
  '„Åæ':'ma','„Åø':'mi','„ÇÄ':'mu','„ÇÅ':'me','„ÇÇ':'mo',
  '„Éû':'ma','„Éü':'mi','„É†':'mu','„É°':'me','„É¢':'mo',
  // y
  '„ÇÑ':'ya','„ÇÜ':'yu','„Çà':'yo',
  '„É§':'ya','„É¶':'yu','„É®':'yo',
  // r
  '„Çâ':'ra','„Çä':'ri','„Çã':'ru','„Çå':'re','„Çç':'ro',
  '„É©':'ra','„É™':'ri','„É´':'ru','„É¨':'re','„É≠':'ro',
  // w + n
  '„Çè':'wa','„Çí':'wo','„Çì':'n',
  '„ÉØ':'wa','„É≤':'wo','„É≥':'n',
  // dakuon/handakuon
  '„Åå':'ga','„Åé':'gi','„Åê':'gu','„Åí':'ge','„Åî':'go',
  '„Ç¨':'ga','„ÇÆ':'gi','„Ç∞':'gu','„Ç≤':'ge','„Ç¥':'go',
  '„Åñ':'za','„Åò':'ji','„Åö':'zu','„Åú':'ze','„Åû':'zo',
  '„Ç∂':'za','„Ç∏':'ji','„Ç∫':'zu','„Çº':'ze','„Çæ':'zo',
  '„Å†':'da','„Å¢':'ji','„Å•':'zu','„Åß':'de','„Å©':'do',
  '„ÉÄ':'da','„ÉÇ':'ji','„ÉÖ':'zu','„Éá':'de','„Éâ':'do',
  '„Å∞':'ba','„Å≥':'bi','„Å∂':'bu','„Åπ':'be','„Åº':'bo',
  '„Éê':'ba','„Éì':'bi','„Éñ':'bu','„Éô':'be','„Éú':'bo',
  '„Å±':'pa','„Å¥':'pi','„Å∑':'pu','„Å∫':'pe','„ÅΩ':'po',
  '„Éë':'pa','„Éî':'pi','„Éó':'pu','„Éö':'pe','„Éù':'po',
  // y≈çon (hiragana)
  '„Åç„ÇÉ':'kya','„Åç„ÇÖ':'kyu','„Åç„Çá':'kyo',
  '„Åé„ÇÉ':'gya','„Åé„ÇÖ':'gyu','„Åé„Çá':'gyo',
  '„Åó„ÇÉ':'sha','„Åó„ÇÖ':'shu','„Åó„Çá':'sho',
  '„Åò„ÇÉ':'ja','„Åò„ÇÖ':'ju','„Åò„Çá':'jo',
  '„Å°„ÇÉ':'cha','„Å°„ÇÖ':'chu','„Å°„Çá':'cho',
  '„Å´„ÇÉ':'nya','„Å´„ÇÖ':'nyu','„Å´„Çá':'nyo',
  '„Å≤„ÇÉ':'hya','„Å≤„ÇÖ':'hyu','„Å≤„Çá':'hyo',
  '„Å≥„ÇÉ':'bya','„Å≥„ÇÖ':'byu','„Å≥„Çá':'byo',
  '„Å¥„ÇÉ':'pya','„Å¥„ÇÖ':'pyu','„Å¥„Çá':'pyo',
  '„Åø„ÇÉ':'mya','„Åø„ÇÖ':'myu','„Åø„Çá':'myo',
  '„Çä„ÇÉ':'rya','„Çä„ÇÖ':'ryu','„Çä„Çá':'ryo',
  // y≈çon (katakana)
  '„Ç≠„É£':'kya','„Ç≠„É•':'kyu','„Ç≠„Éß':'kyo',
  '„ÇÆ„É£':'gya','„ÇÆ„É•':'gyu','„ÇÆ„Éß':'gyo',
  '„Ç∑„É£':'sha','„Ç∑„É•':'shu','„Ç∑„Éß':'sho',
  '„Ç∏„É£':'ja','„Ç∏„É•':'ju','„Ç∏„Éß':'jo',
  '„ÉÅ„É£':'cha','„ÉÅ„É•':'chu','„ÉÅ„Éß':'cho',
  '„Éã„É£':'nya','„Éã„É•':'nyu','„Éã„Éß':'nyo',
  '„Éí„É£':'hya','„Éí„É•':'hyu','„Éí„Éß':'hyo',
  '„Éì„É£':'bya','„Éì„É•':'byu','„Éì„Éß':'byo',
  '„Éî„É£':'pya','„Éî„É•':'pyu','„Éî„Éß':'pyo',
  '„Éü„É£':'mya','„Éü„É•':'myu','„Éü„Éß':'myo',
  '„É™„É£':'rya','„É™„É•':'ryu','„É™„Éß':'ryo',
};

const VOWELS = ['a', 'i', 'u', 'e', 'o'];

/** Goj≈´on (b√°sico) */
const HIRAGANA_TABLE: string[][] = [
  ['„ÅÇ','„ÅÑ','„ÅÜ','„Åà','„Åä'],
  ['„Åã','„Åç','„Åè','„Åë','„Åì'],
  ['„Åï','„Åó','„Åô','„Åõ','„Åù'],
  ['„Åü','„Å°','„Å§','„Å¶','„Å®'],
  ['„Å™','„Å´','„Å¨','„Å≠','„ÅÆ'],
  ['„ÅØ','„Å≤','„Åµ','„Å∏','„Åª'],
  ['„Åæ','„Åø','„ÇÄ','„ÇÅ','„ÇÇ'],
  ['„ÇÑ','','„ÇÜ','','„Çà'],
  ['„Çâ','„Çä','„Çã','„Çå','„Çç'],
  ['„Çè','','','','„Çí'],
  ['„Çì','','','',''],
];
const KATAKANA_TABLE: string[][] = [
  ['„Ç¢','„Ç§','„Ç¶','„Ç®','„Ç™'],
  ['„Ç´','„Ç≠','„ÇØ','„Ç±','„Ç≥'],
  ['„Çµ','„Ç∑','„Çπ','„Çª','„ÇΩ'],
  ['„Çø','„ÉÅ','„ÉÑ','„ÉÜ','„Éà'],
  ['„Éä','„Éã','„Éå','„Éç','„Éé'],
  ['„Éè','„Éí','„Éï','„Éò','„Éõ'],
  ['„Éû','„Éü','„É†','„É°','„É¢'],
  ['„É§','','„É¶','','„É®'],
  ['„É©','„É™','„É´','„É¨','„É≠'],
  ['„ÉØ','','','','„É≤'],
  ['„É≥','','','',''],
];
const ROW_LABELS = ['‚àÖ','k','s','t','n','h','m','y','r','w','n'];

/** Dakuon / Handakuon */
const HIRAGANA_DAKUON: string[][] = [
  ['„Åå','„Åé','„Åê','„Åí','„Åî'],
  ['„Åñ','„Åò','„Åö','„Åú','„Åû'],
  ['„Å†','„Å¢','„Å•','„Åß','„Å©'],
  ['„Å∞','„Å≥','„Å∂','„Åπ','„Åº'],
  ['„Å±','„Å¥','„Å∑','„Å∫','„ÅΩ'],
];
const KATAKANA_DAKUON: string[][] = [
  ['„Ç¨','„ÇÆ','„Ç∞','„Ç≤','„Ç¥'],
  ['„Ç∂','„Ç∏','„Ç∫','„Çº','„Çæ'],
  ['„ÉÄ','„ÉÇ','„ÉÖ','„Éá','„Éâ'],
  ['„Éê','„Éì','„Éñ','„Éô','„Éú'],
  ['„Éë','„Éî','„Éó','„Éö','„Éù'],
];
const DAKUON_ROW_LABELS = ['g','z','d','b','p'];

/** Y≈çon (kya, sha, ‚Ä¶) */
const H_YOON_GROUPS: string[][] = [
  ['„Åç„ÇÉ','„Åç„ÇÖ','„Åç„Çá'],
  ['„Åé„ÇÉ','„Åé„ÇÖ','„Åé„Çá'],
  ['„Åó„ÇÉ','„Åó„ÇÖ','„Åó„Çá'],
  ['„Åò„ÇÉ','„Åò„ÇÖ','„Åò„Çá'],
  ['„Å°„ÇÉ','„Å°„ÇÖ','„Å°„Çá'],
  ['„Å´„ÇÉ','„Å´„ÇÖ','„Å´„Çá'],
  ['„Å≤„ÇÉ','„Å≤„ÇÖ','„Å≤„Çá'],
  ['„Å≥„ÇÉ','„Å≥„ÇÖ','„Å≥„Çá'],
  ['„Å¥„ÇÉ','„Å¥„ÇÖ','„Å¥„Çá'],
  ['„Åø„ÇÉ','„Åø„ÇÖ','„Åø„Çá'],
  ['„Çä„ÇÉ','„Çä„ÇÖ','„Çä„Çá'],
];
const K_YOON_GROUPS: string[][] = [
  ['„Ç≠„É£','„Ç≠„É•','„Ç≠„Éß'],
  ['„ÇÆ„É£','„ÇÆ„É•','„ÇÆ„Éß'],
  ['„Ç∑„É£','„Ç∑„É•','„Ç∑„Éß'],
  ['„Ç∏„É£','„Ç∏„É•','„Ç∏„Éß'],
  ['„ÉÅ„É£','„ÉÅ„É•','„ÉÅ„Éß'],
  ['„Éã„É£','„Éã„É•','„Éã„Éß'],
  ['„Éí„É£','„Éí„É•','„Éí„Éß'],
  ['„Éì„É£','„Éì„É•','„Éì„Éß'],
  ['„Éî„É£','„Éî„É•','„Éî„Éß'],
  ['„Éü„É£','„Éü„É•','„Éü„Éß'],
  ['„É™„É£','„É™„É•','„É™„Éß'],
];

/** 20 Kanji de ejemplo */
type KanjiItem = { char: string; on: string; kun: string; meaning: string };
const KANJI_EXAMPLES: KanjiItem[] = [
  { char:'Êó•', on:'„Éã„ÉÅ',  kun:'„Å≤',   meaning:'sol / d√≠a' },
  { char:'Êúà', on:'„Ç≤„ÉÑ',  kun:'„Å§„Åç', meaning:'luna / mes' },
  { char:'ÁÅ´', on:'„Ç´',    kun:'„Å≤',   meaning:'fuego' },
  { char:'Ê∞¥', on:'„Çπ„Ç§',  kun:'„Åø„Åö', meaning:'agua' },
  { char:'Êú®', on:'„É¢„ÇØ',  kun:'„Åç',   meaning:'√°rbol' },
  { char:'Èáë', on:'„Ç≠„É≥',  kun:'„Åã„Å≠', meaning:'oro / dinero' },
  { char:'Âúü', on:'„Éâ',    kun:'„Å§„Å°', meaning:'tierra' },
  { char:'Â±±', on:'„Çµ„É≥',  kun:'„ÇÑ„Åæ', meaning:'monta√±a' },
  { char:'Â∑ù', on:'„Çª„É≥',  kun:'„Åã„Çè', meaning:'r√≠o' },
  { char:'‰∫∫', on:'„Ç∏„É≥',  kun:'„Å≤„Å®', meaning:'persona' },
  { char:'Âè£', on:'„Ç≥„Ç¶',  kun:'„Åè„Å°', meaning:'boca' },
  { char:'ÁõÆ', on:'„É¢„ÇØ',  kun:'„ÇÅ',   meaning:'ojo' },
  { char:'Êâã', on:'„Ç∑„É•',  kun:'„Å¶',   meaning:'mano' },
  { char:'Âäõ', on:'„É™„Éß„ÇØ',kun:'„Å°„Åã„Çâ', meaning:'fuerza' },
  { char:'Â≠¶', on:'„Ç¨„ÇØ',  kun:'„Åæ„Å™(„Å∂)', meaning:'estudio' },
  { char:'Áîü', on:'„Çª„Ç§',  kun:'„ÅÑ(„Åç„Çã)„Éª„ÅÜ(„Åæ„Çå„Çã)', meaning:'vida / nacer' },
  { char:'ÂÖà', on:'„Çª„É≥',  kun:'„Åï„Åç', meaning:'antes / previo' },
  { char:'ÂõΩ', on:'„Ç≥„ÇØ',  kun:'„Åè„Å´', meaning:'pa√≠s' },
  { char:'Ë™û', on:'„Ç¥',    kun:'„Åã„Åü(„Çã)', meaning:'lengua / contar' },
  { char:'Ê†°', on:'„Ç≥„Ç¶',  kun:'‚Äî',       meaning:'escuela' },
];

/* =========================
   PANTALLA
========================= */
export default function EscrituraScreen() {
  const { tip, show, hide } = useTooltip();

  // üîä Hablar una s√≠laba (kana) con voz japonesa
  const speakKana = (kana: string) => {
    if (!kana?.trim()) return;
    try {
      // detener cualquier reproducci√≥n anterior para evitar solapamientos
      Speech.stop();
      Speech.speak(kana, {
        language: 'ja-JP',
        pitch: 1.0,
        rate: 0.9,
      });
    } catch {}
  };

  // Mostrar tooltip + reproducir audio
  const pronounce = (kana: string, x: number, y: number) => {
    const clean = (kana || '').trim();
    if (!clean) return;
    // 1) audio
    speakKana(clean);
    // 2) tooltip con romaji
    const r = ROMAJI[clean];
    const text = r ? `Se pronuncia: ${r}` : 'A√∫n no tengo la transcripci√≥n exacta üôà (pr√≥ximamente).';
    show(clean, text, x, y);
  };

  const Term = ({ k, children }: { k: keyof typeof GLOSSARY; children: React.ReactNode }) => (
    <Text
      onPressIn={(e) => {
        const { pageX, pageY } = e.nativeEvent;
        show(String(children), GLOSSARY[k], pageX, pageY);
      }}
      style={s.term}
    >
      <Text style={s.bold}>{children}</Text>
    </Text>
  );

  // --- Quiz (identifica sistema) ---
  type QuizItem = { c: string; correct: 'Hiragana'|'Katakana'|'Kanji'; why: string };
  const questions: QuizItem[] = useMemo(
    () => [
      { c: '„ÅÇ', correct: 'Hiragana', why: 'Curva suave t√≠pica de hiragana.' },
      { c: '„Ç´', correct: 'Katakana', why: 'Trazos rectos, angulosos: katakana.' },
      { c: 'Â≠¶', correct: 'Kanji',    why: 'Ideograma con significado (estudio).' },
      { c: '„Åø', correct: 'Hiragana', why: 'Hiragana redondeado.' },
      { c: '„ÇΩ', correct: 'Katakana', why: '√Ångulos de katakana (ojo con „É≥/„ÇΩ).' },
      { c: 'Êµ∑', correct: 'Kanji',    why: 'Kanji con radical de agua Ê∞µ + ‚Äúmar‚Äù.' },
    ],
    []
  );

  return (
    <View style={s.root}>
      <StatusBar backgroundColor="transparent" barStyle="dark-content" />
      <ScrollView
        contentContainerStyle={s.content}
        keyboardShouldPersistTaps="handled"
        nestedScrollEnabled
      >
        {/* AVISO INTERACTIVO */}
        <View style={s.notice}>
          <Text style={s.noticeTitle}>üí° Tip interactivo</Text>
          <Text style={s.noticeText}>
            Toca las <Text style={s.boldWhite}>palabras en negro</Text> o cualquier <Text style={s.boldWhite}>cuadro de las tablas</Text> para escuchar la pronunciaci√≥n y ver un globo rojo con la lectura.
          </Text>
        </View>

        {/* HISTORIA + IM√ÅGENES */}
        <View style={s.card}>
          <Text style={s.h1}>C√≥mo naci√≥ la escritura japonesa ‚úçÔ∏è</Text>
          <Text style={s.pJ}>
            Antes de los teclados, Jap√≥n escrib√≠a con <Term k="kanji">kanji</Term> prestados de China. Para anotar el japon√©s
            tal cual sonaba, surgi√≥ <Term k="many≈çgana">many≈çgana</Term> (kanji por sonido). Con el tiempo, esa idea se simplific√≥ en
            dos silabarios: <Term k="hiragana">hiragana</Term>, de curvas fluidas, y <Term k="katakana">katakana</Term>, de l√≠neas rectas y √°ngulos.
          </Text>

          <View style={s.grid3}>
            <View style={s.cardLite}>
              <Image source={IMG_HIRAGANA} style={s.thumb} />
              <Text style={s.h3}>Hiragana</Text>
              <Text style={s.p}>
                Curvo y redondeado. 46 signos (<Term k="goj≈´on">goj≈´on</Term>). Part√≠culas y
                <Term k="okurigana"> okurigana</Term>. Ej.: „Åì„Çì„Å´„Å°„ÅØ„ÄÅ„ÅÇ„Çä„Åå„Å®„ÅÜ„ÄÇ
              </Text>
            </View>
            <View style={s.cardLite}>
              <Image source={IMG_KATAKANA} style={s.thumb} />
              <Text style={s.h3}>Katakana</Text>
              <Text style={s.p}>
                Recto y angular. 46 signos. Pr√©stamos y onomatopeyas. Ej.: „Ç≥„É≥„Éî„É•„Éº„Çø„ÄÅ„Ç≤„Éº„É†„ÄÅ„Éâ„Ç≠„Éâ„Ç≠„ÄÇ
              </Text>
            </View>
            <View style={s.cardLite}>
              <Image source={IMG_KANJI} style={s.thumb} />
              <Text style={s.h3}>Kanji</Text>
              <Text style={s.p}>
                Ideogramas con <Term k="radicales">radicales</Term> y lecturas <Term k="on‚Äôyomi">on</Term>/<Term k="kun‚Äôyomi">kun</Term>.
                En <Term k="shod≈ç">shod≈ç</Term> importa el orden de trazos.
              </Text>
            </View>
          </View>
        </View>

        {/* EXPLICACI√ìN ON/KUN */}
        <View style={s.card}>
          <Text style={s.h2}>Kanji: on‚Äôyomi y kun‚Äôyomi üîé</Text>
          <Text style={s.pJ}>
            La <Term k="on‚Äôyomi">on‚Äôyomi</Term> es la lectura de origen chino, muy com√∫n en <Text style={s.bold}>compuestos</Text>:
            ÈõªË©±Ôºà„Åß„Çì„ÇèÔºâ= Èõª(„Éá„É≥) + Ë©±(„ÉØ). La <Term k="kun‚Äôyomi">kun‚Äôyomi</Term> es la lectura nativa:
            Ë™≠„ÇÄÔºà„Çà„ÇÄÔºâ, Ë™≠„Çì„Å†Ôºà„Çà„Çì„Å†Ôºâ. Identifica el <Term k="radicales">radical</Term>, memoriza lecturas frecuentes y ap√≥yate en
            <Term k="furigana"> furigana</Term>.
          </Text>
        </View>

        {/* TABLAS */}
        <KanaGrid
          title="Hiragana ‚Äî goj≈´on (b√°sico)"
          rows={HIRAGANA_TABLE}
          rowLabels={ROW_LABELS}
          onPronounce={pronounce}
        />
        <KanaGrid
          title="Hiragana ‚Äî dakuon / handakuon"
          rows={HIRAGANA_DAKUON}
          rowLabels={DAKUON_ROW_LABELS}
          onPronounce={pronounce}
        />
        <YoonGrid
          title="Hiragana ‚Äî y≈çon („ÇÉ/„ÇÖ/„Çá)"
          groups={H_YOON_GROUPS}
          onPronounce={pronounce}
        />

        <KanaGrid
          title="Katakana ‚Äî goj≈´on (b√°sico)"
          rows={KATAKANA_TABLE}
          rowLabels={ROW_LABELS}
          onPronounce={pronounce}
        />
        <KanaGrid
          title="Katakana ‚Äî dakuon / handakuon"
          rows={KATAKANA_DAKUON}
          rowLabels={DAKUON_ROW_LABELS}
          onPronounce={pronounce}
        />
        <YoonGrid
          title="Katakana ‚Äî y≈çon („É£/„É•/„Éß)"
          groups={K_YOON_GROUPS}
          onPronounce={pronounce}
        />

        {/* 20 KANJI DE EJEMPLO */}
        <View style={s.card}>
          <Text style={s.h2}>20 kanji para abrir camino</Text>
          <View style={s.kanjiGrid}>
            {KANJI_EXAMPLES.map((k, i) => (
              <View key={i} style={s.kanjiCard}>
                <Text style={s.kanjiChar}>{k.char}</Text>
                <Text style={s.kanjiReading}>On: {k.on} ¬∑ Kun: {k.kun}</Text>
                <Text style={s.kanjiMeaning}>{k.meaning}</Text>
              </View>
            ))}
          </View>
          <Text style={[s.caption, { marginTop: 8 }]}>
            Tip: aprende radical, cuenta trazos y practica el orden de escritura (shod≈ç).
          </Text>
        </View>

        {/* QUIZ */}
        <IdentifyQuiz questions={questions} />
      </ScrollView>

      {/* OVERLAY ROJO (glosario + pronunciaci√≥n) */}
      {tip.visible && (
        <Pressable style={s.overlay} onPress={() => hide()}>
          <View style={[s.tooltip, { top: Math.max(tip.y - 120, 90), left: 16, right: 16 }]}>
            <Text style={s.tooltipTitle}>{tip.title}</Text>
            <Text style={s.tooltipText}>{tip.text}</Text>
          </View>
        </Pressable>
      )}
    </View>
  );
}

/* =========================
   COMPONENTES: Tablas
========================= */
function KanaGrid({
  title,
  rows,
  rowLabels,
  onPronounce,
}: {
  title: string;
  rows: string[][];
  rowLabels: string[];
  onPronounce: (kana: string, x: number, y: number) => void;
}) {
  return (
    <View style={s.card}>
      <Text style={s.h2}>{title}</Text>

      {/* Cabecera de vocales */}
      <View style={[s.row, s.rowHead]}>
        <View style={[s.cellHead, { width: 38 }]} />
        {VOWELS.map((v) => (
          <View key={v} style={[s.cellHead, s.cell, s.cellBorder]}>
            <Text style={s.cellHeadTxt}>{v}</Text>
          </View>
        ))}
      </View>

      {/* Filas */}
      {rows.map((r, i) => (
        <View key={i} style={s.row}>
          <View style={[s.cellHead, { width: 38 }]}>
            <Text style={s.cellHeadTxt}>{rowLabels[i] ?? ''}</Text>
          </View>
          {r.map((ch, j) => {
            const kana = ch || ' ';
            return (
              <Pressable
                key={`${i}-${j}`}
                onPressIn={(e) =>
                  onPronounce(kana.trim(), e.nativeEvent.pageX, e.nativeEvent.pageY)
                }
                android_ripple={{ color: '#fca5a5' }}
                style={[s.cell, s.cellBorder]}
              >
                <Text style={s.cellTxt}>{kana}</Text>
              </Pressable>
            );
          })}
        </View>
      ))}
    </View>
  );
}

function YoonGrid({
  title,
  groups,
  onPronounce,
}: {
  title: string;
  groups: string[][];
  onPronounce: (kana: string, x: number, y: number) => void;
}) {
  return (
    <View style={s.card}>
      <Text style={s.h2}>{title}</Text>
      <View style={s.yoonWrap}>
        {groups.map((g, idx) => (
          <View key={idx} style={s.yoonGroup}>
            {g.map((syll, j) => (
              <Pressable
                key={j}
                onPressIn={(e) =>
                  onPronounce(syll, e.nativeEvent.pageX, e.nativeEvent.pageY)
                }
                android_ripple={{ color: '#fca5a5' }}
                style={s.yoonCell}
              >
                <Text style={s.yoonTxt}>{syll}</Text>
              </Pressable>
            ))}
          </View>
        ))}
      </View>
      <Text style={[s.caption, { marginTop: 8 }]}>
        * Y≈çon = combinaci√≥n con „ÇÉ/„ÇÖ/„Çá (peque√±os). Ej.: „Åç + „ÇÉ ‚Üí „Åç„ÇÉ = <Text style={s.bold}>kya</Text>.
      </Text>
    </View>
  );
}

/* ===========================
   QUIZ: identifica el sistema
=========================== */
type ScriptKind = 'Hiragana' | 'Katakana' | 'Kanji';

function IdentifyQuiz({
  questions,
}: {
  questions: { c: string; correct: ScriptKind; why: string }[];
}) {
  const { playCorrect, playWrong } = useFeedbackSounds();
  const [answers, setAnswers] = React.useState<number[]>(
    Array(questions.length).fill(-1)
  );

  const press = (qIdx: number, optIndex: number) => {
    const okIndex = (['Hiragana', 'Katakana', 'Kanji'] as ScriptKind[]).indexOf(
      questions[qIdx].correct
    );

    setAnswers(prev => {
      const next = [...prev];
      next[qIdx] = optIndex;
      return next;
    });

    try {
      if (optIndex === okIndex) {
        void playCorrect();
      } else {
        void playWrong();
      }
    } catch {}
  };

  return (
    <View style={s.card}>
      <Text style={s.h2}>Identifica el sistema</Text>

      {questions.map((q, qIdx) => (
        <View key={qIdx} style={{ marginBottom: 16 }}>
          <Text style={s.h3}>{qIdx + 1}. {q.c}</Text>
          <View style={{ gap: 8, marginTop: 6 }}>
            {(['Hiragana', 'Katakana', 'Kanji'] as ScriptKind[]).map((opt, i) => {
              const chosen = answers[qIdx] === i;
              const ok = opt === q.correct;
              return (
                <Pressable
                  key={opt}
                  onPressIn={() => press(qIdx, i)}
                  android_ripple={{ color: '#e5e7eb' }}
                  style={[s.opt, chosen && (ok ? s.optOk : s.optNo)]}
                >
                  <Text style={[s.optTxt, chosen && { color: '#111827' }]}>{opt}</Text>
                </Pressable>
              );
            })}
          </View>
          {answers[qIdx] !== -1 && (
            <Text style={[s.pJ, { marginTop: 6 }]}>
              {(answers[qIdx] === (['Hiragana','Katakana','Kanji'] as ScriptKind[]).indexOf(q.correct))
                ? '‚úÖ ¬°Correcto!'
                : '‚ùå No exactamente.'}{' '}
              {q.why}
            </Text>
          )}
        </View>
      ))}
    </View>
  );
}

/* =========================
   ESTILOS (tema claro)
========================= */
const s = StyleSheet.create({
  root: { flex: 1, backgroundColor: '#fff', position: 'relative' },
  content: { padding: 20, paddingBottom: 40, gap: 12 },

  // Aviso
  notice: {
    backgroundColor: '#111827',
    borderRadius: 12,
    padding: 12,
    borderWidth: 1,
    borderColor: '#1f2937',
  },
  noticeTitle: { color: '#fff', fontWeight: '800', marginBottom: 4, fontSize: 14 },
  noticeText: { color: '#fff', fontSize: 13, lineHeight: 20 },
  boldWhite: { color: '#fff', fontWeight: '800' },

  // Tarjetas base
  card: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 16,
    borderWidth: 1,
    borderColor: '#e5e7eb',
  },
  cardLite: {
    flex: 1,
    backgroundColor: '#fff',
    borderRadius: 14,
    padding: 12,
    borderWidth: 1,
    borderColor: '#e5e7eb',
  },

  // Tipograf√≠a
  h1: { color: '#111827', fontSize: 22, fontWeight: '800', marginBottom: 6 },
  h2: { color: '#111827', fontSize: 18, fontWeight: '800', marginBottom: 8 },
  h3: { color: '#111827', fontSize: 16, fontWeight: '700', marginBottom: 6 },

  pJ: {
    color: '#374151',
    fontSize: 14,
    lineHeight: 22,
    textAlign: 'justify',
    marginBottom: 12,
  },
  p: { color: '#374151', fontSize: 14, lineHeight: 20 },
  caption: { color: '#6b7280', fontSize: 12 },

  // grid de 3 tarjetas
  grid3: { flexDirection: 'row', gap: 12, flexWrap: 'wrap' },

  // im√°genes mini
  thumb: { width: '100%', height: 100, borderRadius: 10, marginBottom: 8, resizeMode: 'cover' },

  // Tablas
  row: { flexDirection: 'row' },
  rowHead: { marginBottom: 2 },
  cell: { width: 46, height: 36, alignItems: 'center', justifyContent: 'center', backgroundColor: '#fff' },
  cellBorder: { borderWidth: 1, borderColor: '#e5e7eb' },
  cellHead: { height: 36, alignItems: 'center', justifyContent: 'center' },
  cellHeadTxt: { color: '#6b7280', fontWeight: '800' },
  cellTxt: { color: '#111827', fontSize: 16 },

  // Y≈çon grid
  yoonWrap: { flexDirection: 'row', flexWrap: 'wrap', gap: 8 },
  yoonGroup: {
    width: '31%',
    borderWidth: 1,
    borderColor: '#e5e7eb',
    borderRadius: 10,
    padding: 8,
    alignItems: 'center',
    backgroundColor: '#fff',
  },
  yoonCell: {
    width: '100%', paddingVertical: 6, alignItems: 'center', justifyContent: 'center',
    borderRadius: 8, backgroundColor: '#f9fafb', marginBottom: 6,
  },
  yoonTxt: { fontSize: 18, color: '#111827' },

  // Kanji grid
  kanjiGrid: { flexDirection: 'row', flexWrap: 'wrap', gap: 10 },
  kanjiCard: {
    width: '47.5%',
    borderWidth: 1,
    borderColor: '#e5e7eb',
    borderRadius: 12,
    padding: 12,
    alignItems: 'center',
    backgroundColor: '#fff',
  },
  kanjiChar: { fontSize: 32, color: '#111827', lineHeight: 34 },
  kanjiReading: { color: '#6b7280', marginTop: 6 },
  kanjiMeaning: { color: '#374151' },

  // Quiz
  opt: {
    borderWidth: 1,
    borderColor: '#cfd6df',
    borderRadius: 10,
    paddingVertical: 10,
    paddingHorizontal: 12,
    backgroundColor: '#ffffff',
  },
  optOk: { backgroundColor: '#c8f7c5', borderColor: '#8ee08a' },
  optNo: { backgroundColor: '#fde2e2', borderColor: '#f5b5b5' },
  optTxt: { color: '#111827', fontSize: 14 },

  // T√©rmino tocable y tooltip rojo
  term: { paddingHorizontal: 2 },
  bold: { fontWeight: '800', color: '#111827' },

  overlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(17,24,39,0.25)',
    justifyContent: 'flex-start',
    zIndex: 9999,
    elevation: 50,
  },
  tooltip: {
    position: 'absolute',
    marginHorizontal: 16,
    padding: 14,
    borderRadius: 12,
    backgroundColor: '#ef4444',
    borderWidth: 1,
    borderColor: '#b91c1c',
  },
  tooltipTitle: { color: '#fff', fontWeight: '800', marginBottom: 4, fontSize: 14 },
  tooltipText: { color: '#fff', fontSize: 13, lineHeight: 19 },
});
